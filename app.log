2024-06-19 16:38:14,911 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 16:38:15,366 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 16:38:22,146 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 16:38:22,389 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 16:38:22,498 - vanna_connector - INFO - Generating SQL for question: Obtén una tabla comparativa con la facturación por ciudades en mayo de 2023 y compáralo con la facturación ciudades en mayo de 2024 y calcula el crecimiento por ciudad ordena por la ciudad con más facturación en el 2024 y calcula también el crecimiento en porcentaje en otra columna, haz una gráfica de barras comparando ciudad vs ciudad por año y pon los montos de un año y agrega una gráfica de línea de crecimiento entre cada una de las ciudades para ver el crecimiento de un año contra el otro
2024-06-19 16:38:22,501 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 16:38:23,631 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 16:38:23,648 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 16:38:29,116 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 902
2024-06-19 16:38:29,118 - vanna_connector - DEBUG - Running SQL query: SELECT 
    ciudad,
    SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2023 THEN monto_sin_iva ELSE 0 END) AS facturacion_mayo_2023,
    SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2024 THEN monto_sin_iva ELSE 0 END) AS facturacion_mayo_2024,
    SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2024 THEN monto_sin_iva ELSE 0 END) - 
    SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2023 THEN monto_sin_iva ELSE 0 END) AS crecimiento,
    (SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2024 THEN monto_sin_iva ELSE 0 END) - 
    SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2023 THEN monto_sin_iva ELSE 0 END)) / 
    NULLIF(SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2023 THEN monto_sin_iva ELSE 0 END), 0) * 100 AS crecimiento_porcentaje
FROM "DATAWAREHOUSE"."FACTURACION"
WHERE 
    EXTRACT(MONTH FROM "DATAWAREHOUSE"."fecha") = 5
GROUP BY 
    ciudad
ORDER BY 
    facturacion_mayo_2024 DESC;
2024-06-19 16:38:29,203 - vanna_connector - ERROR - SQL query failed: missing FROM-clause entry for table "DATAWAREHOUSE"
LINE 3:     SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha")...
                                            ^

2024-06-19 16:50:06,741 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 16:50:06,880 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 16:50:11,425 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 16:50:11,566 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 16:50:11,656 - vanna_connector - INFO - Generating SQL for question: Obtén una tabla comparativa con la facturación por ciudades en mayo de 2023 y compáralo con la facturación ciudades en mayo de 2024 y calcula el crecimiento por ciudad ordena por la ciudad con más facturación en el 2024 y calcula también el crecimiento en porcentaje en otra columna, haz una gráfica de barras comparando ciudad vs ciudad por año y pon los montos de un año y agrega una gráfica de línea de crecimiento entre cada una de las ciudades para ver el crecimiento de un año contra el otro
2024-06-19 16:50:11,657 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 16:50:12,739 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 16:50:12,770 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 16:50:18,385 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1136
2024-06-19 16:50:18,386 - vanna_connector - DEBUG - Running SQL query: "DATAWAREHOUSE"."FACTURACION".SELECT 
    "DATAWAREHOUSE"."FACTURACION".ciudad,
    "DATAWAREHOUSE"."FACTURACION".SUM("DATAWAREHOUSE"."FACTURACION".CASE "DATAWAREHOUSE"."FACTURACION".WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR "DATAWAREHOUSE"."FACTURACION".FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".2023 "DATAWAREHOUSE"."FACTURACION".THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva "DATAWAREHOUSE"."FACTURACION".ELSE "DATAWAREHOUSE"."FACTURACION".0 "DATAWAREHOUSE"."FACTURACION".END) "DATAWAREHOUSE"."FACTURACION".AS "DATAWAREHOUSE"."FACTURACION".facturacion_mayo_2023,
    "DATAWAREHOUSE"."FACTURACION".SUM("DATAWAREHOUSE"."FACTURACION".CASE "DATAWAREHOUSE"."FACTURACION".WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR "DATAWAREHOUSE"."FACTURACION".FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".2024 "DATAWAREHOUSE"."FACTURACION".THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva "DATAWAREHOUSE"."FACTURACION".ELSE "DATAWAREHOUSE"."FACTURACION".0 "DATAWAREHOUSE"."FACTURACION".END) "DATAWAREHOUSE"."FACTURACION".AS "DATAWAREHOUSE"."FACTURACION".facturacion_mayo_2024,
    "DATAWAREHOUSE"."FACTURACION".SUM("DATAWAREHOUSE"."FACTURACION".CASE "DATAWAREHOUSE"."FACTURACION".WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR "DATAWAREHOUSE"."FACTURACION".FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".2024 "DATAWAREHOUSE"."FACTURACION".THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva "DATAWAREHOUSE"."FACTURACION".ELSE "DATAWAREHOUSE"."FACTURACION".0 "DATAWAREHOUSE"."FACTURACION".END) - "DATAWAREHOUSE"."FACTURACION".SUM("DATAWAREHOUSE"."FACTURACION".CASE "DATAWAREHOUSE"."FACTURACION".WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR "DATAWAREHOUSE"."FACTURACION".FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".2023 "DATAWAREHOUSE"."FACTURACION".THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva "DATAWAREHOUSE"."FACTURACION".ELSE "DATAWAREHOUSE"."FACTURACION".0 "DATAWAREHOUSE"."FACTURACION".END) "DATAWAREHOUSE"."FACTURACION".AS "DATAWAREHOUSE"."FACTURACION".crecimiento,
    "DATAWAREHOUSE"."FACTURACION".CASE 
        "DATAWAREHOUSE"."FACTURACION".WHEN "DATAWAREHOUSE"."FACTURACION".SUM("DATAWAREHOUSE"."FACTURACION".CASE "DATAWAREHOUSE"."FACTURACION".WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR "DATAWAREHOUSE"."FACTURACION".FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".2023 "DATAWAREHOUSE"."FACTURACION".THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva "DATAWAREHOUSE"."FACTURACION".ELSE "DATAWAREHOUSE"."FACTURACION".0 "DATAWAREHOUSE"."FACTURACION".END) = "DATAWAREHOUSE"."FACTURACION".0 "DATAWAREHOUSE"."FACTURACION".THEN "DATAWAREHOUSE"."FACTURACION".NULL
        "DATAWAREHOUSE"."FACTURACION".ELSE ("DATAWAREHOUSE"."FACTURACION".SUM("DATAWAREHOUSE"."FACTURACION".CASE "DATAWAREHOUSE"."FACTURACION".WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR "DATAWAREHOUSE"."FACTURACION".FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".2024 "DATAWAREHOUSE"."FACTURACION".THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva "DATAWAREHOUSE"."FACTURACION".ELSE "DATAWAREHOUSE"."FACTURACION".0 "DATAWAREHOUSE"."FACTURACION".END) - "DATAWAREHOUSE"."FACTURACION".SUM("DATAWAREHOUSE"."FACTURACION".CASE "DATAWAREHOUSE"."FACTURACION".WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR "DATAWAREHOUSE"."FACTURACION".FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".2023 "DATAWAREHOUSE"."FACTURACION".THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva "DATAWAREHOUSE"."FACTURACION".ELSE "DATAWAREHOUSE"."FACTURACION".0 "DATAWAREHOUSE"."FACTURACION".END)) / "DATAWAREHOUSE"."FACTURACION".SUM("DATAWAREHOUSE"."FACTURACION".CASE "DATAWAREHOUSE"."FACTURACION".WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR "DATAWAREHOUSE"."FACTURACION".FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".2023 "DATAWAREHOUSE"."FACTURACION".THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva "DATAWAREHOUSE"."FACTURACION".ELSE "DATAWAREHOUSE"."FACTURACION".0 "DATAWAREHOUSE"."FACTURACION".END) * "DATAWAREHOUSE"."FACTURACION".100
    "DATAWAREHOUSE"."FACTURACION".END "DATAWAREHOUSE"."FACTURACION".AS "DATAWAREHOUSE"."FACTURACION".crecimiento_porcentaje
"DATAWAREHOUSE"."FACTURACION".FROM 
    "DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE."DATAWAREHOUSE"."FACTURACION".FACTURACION
"DATAWAREHOUSE"."FACTURACION".WHERE 
    ("DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR "DATAWAREHOUSE"."FACTURACION".FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".2023 "DATAWAREHOUSE"."FACTURACION".AND "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".MONTH "DATAWAREHOUSE"."FACTURACION".FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".5) "DATAWAREHOUSE"."FACTURACION".OR 
    ("DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR "DATAWAREHOUSE"."FACTURACION".FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".2024 "DATAWAREHOUSE"."FACTURACION".AND "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".MONTH "DATAWAREHOUSE"."FACTURACION".FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".5)
"DATAWAREHOUSE"."FACTURACION".GROUP "DATAWAREHOUSE"."FACTURACION".BY 
    "DATAWAREHOUSE"."FACTURACION".ciudad
"DATAWAREHOUSE"."FACTURACION".ORDER "DATAWAREHOUSE"."FACTURACION".BY 
    "DATAWAREHOUSE"."FACTURACION".facturacion_mayo_2024 "DATAWAREHOUSE"."FACTURACION".DESC;
2024-06-19 16:50:18,459 - vanna_connector - ERROR - SQL query failed: syntax error at or near ""DATAWAREHOUSE""
LINE 1: "DATAWAREHOUSE"."FACTURACION".SELECT 
        ^

2024-06-19 16:51:31,371 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 16:51:31,589 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 16:51:34,052 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 16:51:34,205 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 16:51:34,301 - vanna_connector - INFO - Generating SQL for question: Obtén una tabla comparativa con la facturación por ciudades en mayo de 2023 y compáralo con la facturación ciudades en mayo de 2024 y calcula el crecimiento por ciudad ordena por la ciudad con más facturación en el 2024 y calcula también el crecimiento en porcentaje en otra columna, haz una gráfica de barras comparando ciudad vs ciudad por año y pon los montos de un año y agrega una gráfica de línea de crecimiento entre cada una de las ciudades para ver el crecimiento de un año contra el otro
2024-06-19 16:51:34,302 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 16:51:35,114 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 16:51:35,126 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 16:51:40,828 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1006
2024-06-19 16:51:40,829 - vanna_connector - DEBUG - Running SQL query: SELECT 
    "DATAWAREHOUSE"."FACTURACION".ciudad,
    "DATAWAREHOUSE"."FACTURACION".SUM(CASE WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR FROM "DATAWAREHOUSE"."FACTURACION".fecha) = "DATAWAREHOUSE"."FACTURACION".2023 THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END) AS "DATAWAREHOUSE"."FACTURACION".facturacion_2023,
    "DATAWAREHOUSE"."FACTURACION".SUM(CASE WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR FROM "DATAWAREHOUSE"."FACTURACION".fecha) = "DATAWAREHOUSE"."FACTURACION".2024 THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END) AS "DATAWAREHOUSE"."FACTURACION".facturacion_2024,
    "DATAWAREHOUSE"."FACTURACION".SUM(CASE WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR FROM "DATAWAREHOUSE"."FACTURACION".fecha) = "DATAWAREHOUSE"."FACTURACION".2024 THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END) - "DATAWAREHOUSE"."FACTURACION".SUM(CASE WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR FROM "DATAWAREHOUSE"."FACTURACION".fecha) = "DATAWAREHOUSE"."FACTURACION".2023 THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END) AS "DATAWAREHOUSE"."FACTURACION".crecimiento,
    CASE 
        WHEN "DATAWAREHOUSE"."FACTURACION".SUM(CASE WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR FROM "DATAWAREHOUSE"."FACTURACION".fecha) = "DATAWAREHOUSE"."FACTURACION".2023 THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END) = "DATAWAREHOUSE"."FACTURACION".0 THEN "DATAWAREHOUSE"."FACTURACION".NULL
        ELSE ("DATAWAREHOUSE"."FACTURACION".SUM(CASE WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR FROM "DATAWAREHOUSE"."FACTURACION".fecha) = "DATAWAREHOUSE"."FACTURACION".2024 THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END) - "DATAWAREHOUSE"."FACTURACION".SUM(CASE WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR FROM "DATAWAREHOUSE"."FACTURACION".fecha) = "DATAWAREHOUSE"."FACTURACION".2023 THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END)) / "DATAWAREHOUSE"."FACTURACION".SUM(CASE WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR FROM "DATAWAREHOUSE"."FACTURACION".fecha) = "DATAWAREHOUSE"."FACTURACION".2023 THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END) * "DATAWAREHOUSE"."FACTURACION".100
    END AS "DATAWAREHOUSE"."FACTURACION".crecimiento_porcentaje
FROM 
    "DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE."DATAWAREHOUSE"."FACTURACION".FACTURACION
WHERE 
    "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".MONTH FROM "DATAWAREHOUSE"."FACTURACION".fecha) = "DATAWAREHOUSE"."FACTURACION".5
GROUP "DATAWAREHOUSE"."FACTURACION".BY 
    "DATAWAREHOUSE"."FACTURACION".ciudad
ORDER "DATAWAREHOUSE"."FACTURACION".BY 
    "DATAWAREHOUSE"."FACTURACION".facturacion_2024 "DATAWAREHOUSE"."FACTURACION".DESC;
2024-06-19 16:51:40,910 - vanna_connector - ERROR - SQL query failed: syntax error at or near "FROM"
LINE 3: ...ACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR FROM "DATA...
                                                             ^

2024-06-19 16:51:48,069 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 16:51:48,267 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 16:51:48,952 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 16:51:49,113 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 16:51:51,043 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 16:51:51,203 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 16:51:51,318 - vanna_connector - INFO - Generating SQL for question: Obtén una tabla comparativa con la facturación por ciudades en mayo de 2023 y compáralo con la facturación ciudades en mayo de 2024 y calcula el crecimiento por ciudad ordena por la ciudad con más facturación en el 2024 y calcula también el crecimiento en porcentaje en otra columna, haz una gráfica de barras comparando ciudad vs ciudad por año y pon los montos de un año y agrega una gráfica de línea de crecimiento entre cada una de las ciudades para ver el crecimiento de un año contra el otro
2024-06-19 16:51:51,320 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 16:51:52,266 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 16:51:52,287 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 16:51:57,197 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1005
2024-06-19 16:51:57,199 - vanna_connector - DEBUG - Running SQL query: SELECT 
    "DATAWAREHOUSE"."FACTURACION".f2023."DATAWAREHOUSE"."FACTURACION".ciudad,
    "DATAWAREHOUSE"."FACTURACION".COALESCE("DATAWAREHOUSE"."FACTURACION".f2023."DATAWAREHOUSE"."FACTURACION".total_facturacion, "DATAWAREHOUSE"."FACTURACION".0) AS "DATAWAREHOUSE"."FACTURACION".facturacion_mayo_2023,
    "DATAWAREHOUSE"."FACTURACION".COALESCE("DATAWAREHOUSE"."FACTURACION".f2024."DATAWAREHOUSE"."FACTURACION".total_facturacion, "DATAWAREHOUSE"."FACTURACION".0) AS "DATAWAREHOUSE"."FACTURACION".facturacion_mayo_2024,
    ("DATAWAREHOUSE"."FACTURACION".COALESCE("DATAWAREHOUSE"."FACTURACION".f2024."DATAWAREHOUSE"."FACTURACION".total_facturacion, "DATAWAREHOUSE"."FACTURACION".0) - "DATAWAREHOUSE"."FACTURACION".COALESCE("DATAWAREHOUSE"."FACTURACION".f2023."DATAWAREHOUSE"."FACTURACION".total_facturacion, "DATAWAREHOUSE"."FACTURACION".0)) AS "DATAWAREHOUSE"."FACTURACION".crecimiento,
    CASE 
        WHEN "DATAWAREHOUSE"."FACTURACION".f2023."DATAWAREHOUSE"."FACTURACION".total_facturacion "DATAWAREHOUSE"."FACTURACION".IS "DATAWAREHOUSE"."FACTURACION".NULL THEN "DATAWAREHOUSE"."FACTURACION".0
        ELSE (("DATAWAREHOUSE"."FACTURACION".COALESCE("DATAWAREHOUSE"."FACTURACION".f2024."DATAWAREHOUSE"."FACTURACION".total_facturacion, "DATAWAREHOUSE"."FACTURACION".0) - "DATAWAREHOUSE"."FACTURACION".COALESCE("DATAWAREHOUSE"."FACTURACION".f2023."DATAWAREHOUSE"."FACTURACION".total_facturacion, "DATAWAREHOUSE"."FACTURACION".0)) / "DATAWAREHOUSE"."FACTURACION".f2023."DATAWAREHOUSE"."FACTURACION".total_facturacion) * "DATAWAREHOUSE"."FACTURACION".100
    END AS "DATAWAREHOUSE"."FACTURACION".crecimiento_porcentaje
FROM 
    (SELECT "DATAWAREHOUSE"."FACTURACION".ciudad, "DATAWAREHOUSE"."FACTURACION".SUM("DATAWAREHOUSE"."FACTURACION".monto_sin_iva) AS "DATAWAREHOUSE"."FACTURACION".total_facturacion 
     FROM "DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE."DATAWAREHOUSE"."FACTURACION".FACTURACION 
     WHERE "DATAWAREHOUSE"."FACTURACION".fecha "DATAWAREHOUSE"."FACTURACION".BETWEEN '"DATAWAREHOUSE"."FACTURACION".2023-"DATAWAREHOUSE"."FACTURACION".05-"DATAWAREHOUSE"."FACTURACION".01' AND '"DATAWAREHOUSE"."FACTURACION".2023-"DATAWAREHOUSE"."FACTURACION".05-"DATAWAREHOUSE"."FACTURACION".31' 
     GROUP "DATAWAREHOUSE"."FACTURACION".BY "DATAWAREHOUSE"."FACTURACION".ciudad) "DATAWAREHOUSE"."FACTURACION".f2023
"DATAWAREHOUSE"."FACTURACION".FULL "DATAWAREHOUSE"."FACTURACION".OUTER JOIN 
    (SELECT "DATAWAREHOUSE"."FACTURACION".ciudad, "DATAWAREHOUSE"."FACTURACION".SUM("DATAWAREHOUSE"."FACTURACION".monto_sin_iva) AS "DATAWAREHOUSE"."FACTURACION".total_facturacion 
     FROM "DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE."DATAWAREHOUSE"."FACTURACION".FACTURACION 
     WHERE "DATAWAREHOUSE"."FACTURACION".fecha "DATAWAREHOUSE"."FACTURACION".BETWEEN '"DATAWAREHOUSE"."FACTURACION".2024-"DATAWAREHOUSE"."FACTURACION".05-"DATAWAREHOUSE"."FACTURACION".01' AND '"DATAWAREHOUSE"."FACTURACION".2024-"DATAWAREHOUSE"."FACTURACION".05-"DATAWAREHOUSE"."FACTURACION".31' 
     GROUP "DATAWAREHOUSE"."FACTURACION".BY "DATAWAREHOUSE"."FACTURACION".ciudad) "DATAWAREHOUSE"."FACTURACION".f2024
ON "DATAWAREHOUSE"."FACTURACION".f2023."DATAWAREHOUSE"."FACTURACION".ciudad = "DATAWAREHOUSE"."FACTURACION".f2024."DATAWAREHOUSE"."FACTURACION".ciudad
ORDER "DATAWAREHOUSE"."FACTURACION".BY "DATAWAREHOUSE"."FACTURACION".facturacion_mayo_2024 "DATAWAREHOUSE"."FACTURACION".DESC;
2024-06-19 16:51:57,280 - vanna_connector - ERROR - SQL query failed: syntax error at or near ".0"
LINE 3: ...".total_facturacion, "DATAWAREHOUSE"."FACTURACION".0) AS "DA...
                                                             ^

2024-06-19 16:53:22,481 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 16:53:22,642 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 16:53:25,095 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 16:53:25,211 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 16:53:25,301 - vanna_connector - INFO - Generating SQL for question: Obtén una tabla comparativa con la facturación por ciudades en mayo de 2023 y compáralo con la facturación ciudades en mayo de 2024 y calcula el crecimiento por ciudad ordena por la ciudad con más facturación en el 2024 y calcula también el crecimiento en porcentaje en otra columna, haz una gráfica de barras comparando ciudad vs ciudad por año y pon los montos de un año y agrega una gráfica de línea de crecimiento entre cada una de las ciudades para ver el crecimiento de un año contra el otro
2024-06-19 16:53:25,301 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 16:53:26,340 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 16:53:26,342 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 16:53:30,996 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1048
2024-06-19 16:53:30,997 - vanna_connector - DEBUG - Running SQL query: SELECT 
    "DATAWAREHOUSE"."FACTURACION".ciudad,
    SUM(CASE WHEN "DATAWAREHOUSE"."FACTURACION".fecha BETWEEN '"DATAWAREHOUSE"."FACTURACION".2023-"DATAWAREHOUSE"."FACTURACION".05-"DATAWAREHOUSE"."FACTURACION".01' AND '"DATAWAREHOUSE"."FACTURACION".2023-"DATAWAREHOUSE"."FACTURACION".05-"DATAWAREHOUSE"."FACTURACION".31' THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END) AS "DATAWAREHOUSE"."FACTURACION".facturacion_mayo_2023,
    SUM(CASE WHEN "DATAWAREHOUSE"."FACTURACION".fecha BETWEEN '"DATAWAREHOUSE"."FACTURACION".2024-"DATAWAREHOUSE"."FACTURACION".05-"DATAWAREHOUSE"."FACTURACION".01' AND '"DATAWAREHOUSE"."FACTURACION".2024-"DATAWAREHOUSE"."FACTURACION".05-"DATAWAREHOUSE"."FACTURACION".31' THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END) AS "DATAWAREHOUSE"."FACTURACION".facturacion_mayo_2024,
    SUM(CASE WHEN "DATAWAREHOUSE"."FACTURACION".fecha BETWEEN '"DATAWAREHOUSE"."FACTURACION".2024-"DATAWAREHOUSE"."FACTURACION".05-"DATAWAREHOUSE"."FACTURACION".01' AND '"DATAWAREHOUSE"."FACTURACION".2024-"DATAWAREHOUSE"."FACTURACION".05-"DATAWAREHOUSE"."FACTURACION".31' THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END) - SUM(CASE WHEN "DATAWAREHOUSE"."FACTURACION".fecha BETWEEN '"DATAWAREHOUSE"."FACTURACION".2023-"DATAWAREHOUSE"."FACTURACION".05-"DATAWAREHOUSE"."FACTURACION".01' AND '"DATAWAREHOUSE"."FACTURACION".2023-"DATAWAREHOUSE"."FACTURACION".05-"DATAWAREHOUSE"."FACTURACION".31' THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END) AS "DATAWAREHOUSE"."FACTURACION".crecimiento,
    (SUM(CASE WHEN "DATAWAREHOUSE"."FACTURACION".fecha BETWEEN '"DATAWAREHOUSE"."FACTURACION".2024-"DATAWAREHOUSE"."FACTURACION".05-"DATAWAREHOUSE"."FACTURACION".01' AND '"DATAWAREHOUSE"."FACTURACION".2024-"DATAWAREHOUSE"."FACTURACION".05-"DATAWAREHOUSE"."FACTURACION".31' THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END) - SUM(CASE WHEN "DATAWAREHOUSE"."FACTURACION".fecha BETWEEN '"DATAWAREHOUSE"."FACTURACION".2023-"DATAWAREHOUSE"."FACTURACION".05-"DATAWAREHOUSE"."FACTURACION".01' AND '"DATAWAREHOUSE"."FACTURACION".2023-"DATAWAREHOUSE"."FACTURACION".05-"DATAWAREHOUSE"."FACTURACION".31' THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END)) / "DATAWAREHOUSE"."FACTURACION".NULLIF(SUM(CASE WHEN "DATAWAREHOUSE"."FACTURACION".fecha BETWEEN '"DATAWAREHOUSE"."FACTURACION".2023-"DATAWAREHOUSE"."FACTURACION".05-"DATAWAREHOUSE"."FACTURACION".01' AND '"DATAWAREHOUSE"."FACTURACION".2023-"DATAWAREHOUSE"."FACTURACION".05-"DATAWAREHOUSE"."FACTURACION".31' THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END), "DATAWAREHOUSE"."FACTURACION".0) * "DATAWAREHOUSE"."FACTURACION".100 AS "DATAWAREHOUSE"."FACTURACION".crecimiento_porcentaje
FROM 
    "DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE."DATAWAREHOUSE"."FACTURACION".FACTURACION
WHERE 
    "DATAWAREHOUSE"."FACTURACION".fecha BETWEEN '"DATAWAREHOUSE"."FACTURACION".2023-"DATAWAREHOUSE"."FACTURACION".05-"DATAWAREHOUSE"."FACTURACION".01' AND '"DATAWAREHOUSE"."FACTURACION".2023-"DATAWAREHOUSE"."FACTURACION".05-"DATAWAREHOUSE"."FACTURACION".31'
    OR "DATAWAREHOUSE"."FACTURACION".fecha BETWEEN '"DATAWAREHOUSE"."FACTURACION".2024-"DATAWAREHOUSE"."FACTURACION".05-"DATAWAREHOUSE"."FACTURACION".01' AND '"DATAWAREHOUSE"."FACTURACION".2024-"DATAWAREHOUSE"."FACTURACION".05-"DATAWAREHOUSE"."FACTURACION".31'
GROUP "DATAWAREHOUSE"."FACTURACION".BY 
    "DATAWAREHOUSE"."FACTURACION".ciudad
ORDER "DATAWAREHOUSE"."FACTURACION".BY 
    "DATAWAREHOUSE"."FACTURACION".facturacion_mayo_2024 "DATAWAREHOUSE"."FACTURACION".DESC;
2024-06-19 16:53:31,096 - vanna_connector - ERROR - SQL query failed: syntax error at or near ".0"
LINE 3: ...".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END) AS...
                                                             ^

2024-06-19 16:54:45,370 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 16:54:45,370 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 16:54:45,710 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 16:54:45,711 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 16:54:45,953 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 16:54:46,180 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 16:54:48,765 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 16:54:48,967 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 16:54:49,106 - vanna_connector - INFO - Generating SQL for question: Obtén una tabla comparativa con la facturación por ciudades en mayo de 2023 y compáralo con la facturación ciudades en mayo de 2024 y calcula el crecimiento por ciudad ordena por la ciudad con más facturación en el 2024 y calcula también el crecimiento en porcentaje en otra columna, haz una gráfica de barras comparando ciudad vs ciudad por año y pon los montos de un año y agrega una gráfica de línea de crecimiento entre cada una de las ciudades para ver el crecimiento de un año contra el otro
2024-06-19 16:54:49,108 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 16:54:50,146 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 16:54:50,159 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 16:54:56,605 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1111
2024-06-19 16:54:56,608 - vanna_connector - DEBUG - Running SQL query: SELECT 
    "DATAWAREHOUSE"."FACTURACION".ciudad,
    SUM(CASE WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".2023 AND "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".MONTH FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".5 THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END) AS "DATAWAREHOUSE"."FACTURACION".facturacion_mayo_2023,
    SUM(CASE WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".2024 AND "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".MONTH FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".5 THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END) AS "DATAWAREHOUSE"."FACTURACION".facturacion_mayo_2024,
    SUM(CASE WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".2024 AND "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".MONTH FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".5 THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END) - 
    SUM(CASE WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".2023 AND "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".MONTH FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".5 THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END) AS "DATAWAREHOUSE"."FACTURACION".crecimiento,
    (SUM(CASE WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".2024 AND "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".MONTH FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".5 THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END) - 
    SUM(CASE WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".2023 AND "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".MONTH FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".5 THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END)) / 
    "DATAWAREHOUSE"."FACTURACION".NULLIF(SUM(CASE WHEN "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".2023 AND "DATAWAREHOUSE"."FACTURACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".MONTH FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".fecha") = "DATAWAREHOUSE"."FACTURACION".5 THEN "DATAWAREHOUSE"."FACTURACION".monto_sin_iva ELSE "DATAWAREHOUSE"."FACTURACION".0 END), "DATAWAREHOUSE"."FACTURACION".0) * "DATAWAREHOUSE"."FACTURACION".100 AS "DATAWAREHOUSE"."FACTURACION".crecimiento_porcentaje
FROM ""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".""DATAWAREHOUSE"."FACTURACION".DATAWAREHOUSE".FACTURACION
GROUP BY 
    "DATAWAREHOUSE"."FACTURACION".ciudad
ORDER BY 
    "DATAWAREHOUSE"."FACTURACION".facturacion_mayo_2024 DESC;
2024-06-19 16:54:56,692 - vanna_connector - ERROR - SQL query failed: syntax error at or near "FROM"
LINE 3: ...ACION".EXTRACT("DATAWAREHOUSE"."FACTURACION".YEAR FROM ""DAT...
                                                             ^

2024-06-19 16:58:34,502 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 16:58:34,756 - vanna_connector - INFO - Setting search path to include the schema DATAWAREHOUSE
2024-06-19 16:58:34,911 - vanna_connector - ERROR - Failed to set search path: no results to fetch
2024-06-19 16:58:34,912 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'DATAWAREHOUSE' AND table_name = 'FACTURACION'
2024-06-19 16:58:53,848 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 16:58:54,038 - vanna_connector - INFO - Setting search path to include the schema DATAWAREHOUSE
2024-06-19 16:58:54,202 - vanna_connector - ERROR - Failed to set search path: no results to fetch
2024-06-19 16:58:54,202 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'DATAWAREHOUSE' AND table_name = 'FACTURACION'
2024-06-19 17:00:08,734 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:00:08,904 - vanna_connector - INFO - Setting search path to include the schema DATAWAREHOUSE
2024-06-19 17:00:08,904 - vanna_connector - DEBUG - Running non-select SQL query: SET search_path TO DATAWAREHOUSE
2024-06-19 17:00:08,904 - vanna_connector - ERROR - Non-select SQL query failed: 'NoneType' object has no attribute 'execute'
2024-06-19 17:00:08,904 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'DATAWAREHOUSE' AND table_name = 'FACTURACION'
2024-06-19 17:00:32,010 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:00:32,171 - vanna_connector - INFO - Setting search path to include the schema DATAWAREHOUSE
2024-06-19 17:00:32,171 - vanna_connector - DEBUG - Running non-select SQL query: SET search_path TO DATAWAREHOUSE
2024-06-19 17:00:32,172 - vanna_connector - ERROR - Non-select SQL query failed: 'NoneType' object has no attribute 'execute'
2024-06-19 17:00:32,172 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'DATAWAREHOUSE' AND table_name = 'FACTURACION'
2024-06-19 17:02:14,979 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:02:15,111 - vanna_connector - INFO - Setting search path to include the schema DATAWAREHOUSE
2024-06-19 17:02:15,111 - vanna_connector - DEBUG - Running non-select SQL query: SET search_path TO DATAWAREHOUSE
2024-06-19 17:02:15,111 - vanna_connector - ERROR - Non-select SQL query failed: 'NoneType' object has no attribute 'cursor'
2024-06-19 17:02:15,111 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE table_schema = 'DATAWAREHOUSE' AND table_name = 'FACTURACION'
2024-06-19 17:03:18,344 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:03:18,537 - vanna_connector - INFO - PostgreSQL connection established
2024-06-19 17:03:18,538 - vanna_connector - ERROR - No database connection available to set search path
2024-06-19 17:03:18,538 - vanna_connector - ERROR - No database connection available to run SQL query
2024-06-19 17:03:18,538 - __main__ - CRITICAL - Critical error: 'NoneType' object has no attribute 'columns'
2024-06-19 17:06:12,231 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:06:12,414 - vanna_connector - INFO - PostgreSQL connection established
2024-06-19 17:06:12,415 - vanna_connector - ERROR - No database connection available to set search path
2024-06-19 17:06:12,415 - vanna_connector - ERROR - No database connection available to run SQL query
2024-06-19 17:06:12,415 - __main__ - CRITICAL - Critical error: 'NoneType' object has no attribute 'columns'
2024-06-19 17:07:42,250 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:07:42,450 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:07:46,425 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:07:46,661 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:07:46,777 - vanna_connector - INFO - Generating SQL for question: Obtén una tabla comparativa con la facturación por ciudades en mayo de 2023 y compáralo con la facturación ciudades en mayo de 2024 y calcula el crecimiento por ciudad ordena por la ciudad con más facturación en el 2024 y calcula también el crecimiento en porcentaje en otra columna, haz una gráfica de barras comparando ciudad vs ciudad por año y pon los montos de un año y agrega una gráfica de línea de crecimiento entre cada una de las ciudades para ver el crecimiento de un año contra el otro
2024-06-19 17:07:46,778 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:07:47,855 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 17:07:47,873 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:07:55,961 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1080
2024-06-19 17:07:55,964 - vanna_connector - DEBUG - Running SQL query: SELECT
    ciudad,
    SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2023 THEN monto_sin_iva ELSE 0 END) AS facturacion_mayo_2023,
    SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2024 THEN monto_sin_iva ELSE 0 END) AS facturacion_mayo_2024,
    SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2024 THEN monto_sin_iva ELSE 0 END) - SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2023 THEN monto_sin_iva ELSE 0 END) AS crecimiento,
    CASE 
        WHEN SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2023 THEN monto_sin_iva ELSE 0 END) = 0 
        THEN 0 
        ELSE (SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2024 THEN monto_sin_iva ELSE 0 END) - SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2023 THEN monto_sin_iva ELSE 0 END)) / SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2023 THEN monto_sin_iva ELSE 0 END) * 100 
    END AS crecimiento_porcentaje
FROM "DATAWAREHOUSE"."DATAWAREHOUSE".FACTURACION
WHERE 
    EXTRACT(MONTH FROM "DATAWAREHOUSE"."fecha") = 5 
    AND EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") IN (2023, 2024)
GROUP BY 
    ciudad
ORDER BY 
    facturacion_mayo_2024 DESC;
2024-06-19 17:07:56,027 - vanna_connector - ERROR - SQL query failed: cross-database references are not implemented: "DATAWAREHOUSE.DATAWAREHOUSE.facturacion"
LINE 11: FROM "DATAWAREHOUSE"."DATAWAREHOUSE".FACTURACION
              ^

2024-06-19 17:08:38,598 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:08:38,767 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:08:41,668 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:08:41,801 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:08:41,879 - vanna_connector - INFO - Generating SQL for question: Obtén una tabla comparativa con la facturación por ciudades en mayo de 2023 y compáralo con la facturación ciudades en mayo de 2024 y calcula el crecimiento por ciudad ordena por la ciudad con más facturación en el 2024 y calcula también el crecimiento en porcentaje en otra columna, haz una gráfica de barras comparando ciudad vs ciudad por año y pon los montos de un año y agrega una gráfica de línea de crecimiento entre cada una de las ciudades para ver el crecimiento de un año contra el otro
2024-06-19 17:08:41,880 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:08:42,747 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 17:08:42,762 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:08:47,956 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1079
2024-06-19 17:08:47,959 - vanna_connector - DEBUG - Running SQL query: SELECT 
    ciudad,
    SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2023 THEN monto_sin_iva ELSE 0 END) AS facturacion_2023,
    SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2024 THEN monto_sin_iva ELSE 0 END) AS facturacion_2024,
    SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2024 THEN monto_sin_iva ELSE 0 END) - SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2023 THEN monto_sin_iva ELSE 0 END) AS crecimiento,
    CASE 
        WHEN SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2023 THEN monto_sin_iva ELSE 0 END) = 0 THEN NULL
        ELSE (SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2024 THEN monto_sin_iva ELSE 0 END) - SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2023 THEN monto_sin_iva ELSE 0 END)) / SUM(CASE WHEN EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2023 THEN monto_sin_iva ELSE 0 END) * 100
    END AS crecimiento_porcentaje
FROM "DATAWAREHOUSE"."DATAWAREHOUSE".FACTURACION
WHERE 
    EXTRACT(MONTH FROM "DATAWAREHOUSE"."fecha") = 5 AND (EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2023 OR EXTRACT(YEAR FROM "DATAWAREHOUSE"."fecha") = 2024)
GROUP BY 
    ciudad
ORDER BY 
    facturacion_2024 DESC;
2024-06-19 17:08:48,059 - vanna_connector - ERROR - SQL query failed: cross-database references are not implemented: "DATAWAREHOUSE.DATAWAREHOUSE.facturacion"
LINE 10: FROM "DATAWAREHOUSE"."DATAWAREHOUSE".FACTURACION
              ^

2024-06-19 17:23:16,439 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:23:16,810 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:23:32,552 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:23:32,743 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:23:32,863 - vanna_connector - INFO - Generating SQL for question: Obtén una tabla comparativa con el top 10 de las ciudades con mayor facturación en mayo de 2023 y compáralo con las ciudades con mayor facturación en mayo de 2024
2024-06-19 17:23:32,865 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:23:33,919 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 17:23:33,934 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:23:38,027 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1090
2024-06-19 17:23:38,030 - vanna_connector - DEBUG - Running SQL query: WITH facturacion_mayo_2023 AS (
    SELECT 
        ciudad, 
        SUM(monto_sin_iva) AS total_facturacion
    FROM "DATAWAREHOUSE"."DATAWAREHOUSE".FACTURACION
    WHERE 
        DATE_TRUNC('month', fecha) = '2023-05-01'
    GROUP BY 
        ciudad
    ORDER BY 
        total_facturacion DESC
    LIMIT 10
),
facturacion_mayo_2024 AS (
    SELECT 
        ciudad, 
        SUM(monto_sin_iva) AS total_facturacion
    FROM "DATAWAREHOUSE"."DATAWAREHOUSE".FACTURACION
    WHERE 
        DATE_TRUNC('month', fecha) = '2024-05-01'
    GROUP BY 
        ciudad
    ORDER BY 
        total_facturacion DESC
    LIMIT 10
)
SELECT 
    COALESCE(fm23.ciudad, fm24.ciudad) AS ciudad,
    fm23.total_facturacion AS total_facturacion_mayo_2023,
    fm24.total_facturacion AS total_facturacion_mayo_2024
FROM "DATAWAREHOUSE"."facturacion_mayo_2023" fm23
FULL OUTER JOIN "DATAWAREHOUSE"."facturacion_mayo_2024" fm24
ON 
    fm23.ciudad = fm24.ciudad
ORDER BY 
    COALESCE(fm23.total_facturacion, 0) DESC, 
    COALESCE(fm24.total_facturacion, 0) DESC;
2024-06-19 17:23:38,112 - vanna_connector - ERROR - SQL query failed: cross-database references are not implemented: "DATAWAREHOUSE.DATAWAREHOUSE.facturacion"
LINE 5:     FROM "DATAWAREHOUSE"."DATAWAREHOUSE".FACTURACION
                 ^

2024-06-19 17:24:08,553 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:24:08,717 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:24:12,730 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:24:12,945 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:24:13,163 - vanna_connector - INFO - Generating SQL for question: Obtén una tabla comparativa con el top 10 de las ciudades con mayor facturación en mayo de 2023 y compáralo con las ciudades con mayor facturación en mayo de 2024
2024-06-19 17:24:13,164 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:24:14,175 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 17:24:14,181 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:24:19,731 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1101
2024-06-19 17:24:19,731 - vanna_connector - DEBUG - Running SQL query: WITH facturacion_mayo_2023 AS (
    SELECT 
        ciudad, 
        SUM(monto_sin_iva) AS total_facturacion
    FROM 
        DATAWAREHOUSE.FACTURACION
    WHERE 
        fecha >= '2023-05-01' AND fecha <= '2023-05-31'
    GROUP BY 
        ciudad
    ORDER BY 
        total_facturacion DESC
    LIMIT 10
), facturacion_mayo_2024 AS (
    SELECT 
        ciudad, 
        SUM(monto_sin_iva) AS total_facturacion
    FROM 
        DATAWAREHOUSE.FACTURACION
    WHERE 
        fecha >= '2024-05-01' AND fecha <= '2024-05-31'
    GROUP BY 
        ciudad
    ORDER BY 
        total_facturacion DESC
    LIMIT 10
)
SELECT 
    COALESCE(f2023.ciudad, f2024.ciudad) AS ciudad,
    f2023.total_facturacion AS total_facturacion_mayo_2023,
    f2024.total_facturacion AS total_facturacion_mayo_2024
FROM 
    facturacion_mayo_2023 f2023
FULL OUTER JOIN 
    facturacion_mayo_2024 f2024
ON 
    f2023.ciudad = f2024.ciudad
ORDER BY 
    COALESCE(f2023.total_facturacion, 0) + COALESCE(f2024.total_facturacion, 0) DESC;
2024-06-19 17:24:19,889 - vanna_connector - ERROR - SQL query failed: relation "datawarehouse.facturacion" does not exist
LINE 6:         DATAWAREHOUSE.FACTURACION
                ^

2024-06-19 17:29:26,607 - __main__ - CRITICAL - Critical error: VannaConnector.__init__() got an unexpected keyword argument 'schema'
2024-06-19 17:29:53,440 - __main__ - CRITICAL - Critical error: VannaConnector.__init__() got an unexpected keyword argument 'schema'
2024-06-19 17:30:25,143 - __main__ - CRITICAL - Critical error: VannaConnector.__init__() got an unexpected keyword argument 'schema'
2024-06-19 17:31:06,297 - __main__ - CRITICAL - Critical error: VannaConnector.__init__() got an unexpected keyword argument 'schema'
2024-06-19 17:31:20,227 - __main__ - CRITICAL - Critical error: VannaConnector.__init__() got an unexpected keyword argument 'schema'
2024-06-19 17:32:55,765 - __main__ - CRITICAL - Critical error: VannaConnector.__init__() got an unexpected keyword argument 'schema'
2024-06-19 17:33:07,503 - __main__ - CRITICAL - Critical error: VannaConnector.__init__() got an unexpected keyword argument 'schema'
2024-06-19 17:33:36,800 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:33:37,005 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:33:53,076 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:33:53,237 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:33:53,326 - vanna_connector - INFO - Generating SQL for question: Obtén una tabla comparativa con el top 10 de las ciudades con mayor facturación en mayo de 2023 y compáralo con las ciudades con mayor facturación en mayo de 2024
2024-06-19 17:33:53,327 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:33:54,170 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 17:33:54,185 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:34:01,130 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 933
2024-06-19 17:34:01,133 - vanna_connector - DEBUG - Running SQL query: WITH facturacion_mayo_2023 AS (
    SELECT ciudad, SUM(monto_sin_iva) AS total_facturacion
    FROM "DATAWAREHOUSE"."DATAWAREHOUSE".FACTURACION
    WHERE fecha >= '2023-05-01' AND fecha < '2023-06-01'
    GROUP BY ciudad
    ORDER BY total_facturacion DESC
    LIMIT 10
),
facturacion_mayo_2024 AS (
    SELECT ciudad, SUM(monto_sin_iva) AS total_facturacion
    FROM "DATAWAREHOUSE"."DATAWAREHOUSE".FACTURACION
    WHERE fecha >= '2024-05-01' AND fecha < '2024-06-01'
    GROUP BY ciudad
    ORDER BY total_facturacion DESC
    LIMIT 10
)
SELECT 
    COALESCE(fm2023.ciudad, fm2024.ciudad) AS ciudad,
    fm2023.total_facturacion AS facturacion_mayo_2023,
    fm2024.total_facturacion AS facturacion_mayo_2024
FROM "DATAWAREHOUSE"."facturacion_mayo_2023" fm2023
FULL OUTER JOIN "DATAWAREHOUSE"."facturacion_mayo_2024" fm2024
ON 
    fm2023.ciudad = fm2024.ciudad
ORDER BY
    COALESCE(fm2023.ciudad, fm2024.ciudad);
2024-06-19 17:34:01,274 - vanna_connector - ERROR - SQL query failed: cross-database references are not implemented: "DATAWAREHOUSE.DATAWAREHOUSE.facturacion"
LINE 3:     FROM "DATAWAREHOUSE"."DATAWAREHOUSE".FACTURACION
                 ^

2024-06-19 17:35:56,080 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:35:56,458 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:36:00,547 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:36:00,709 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:36:00,821 - vanna_connector - INFO - Generating SQL for question: Obtén una tabla comparativa con el top 10 de las ciudades con mayor facturación en mayo de 2023 y compáralo con las ciudades con mayor facturación en mayo de 2024
2024-06-19 17:36:00,822 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:36:02,283 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 17:36:02,284 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:36:06,570 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1082
2024-06-19 17:36:06,571 - vanna_connector - DEBUG - Running SQL query: WITH facturacion_mayo_2023 AS (
    SELECT
        ciudad,
        SUM(monto_sin_iva) AS total_facturacion
    FROM "DATAWAREHOUSE".FACTURACION
    WHERE
        fecha BETWEEN '2023-05-01' AND '2023-05-31'
    GROUP BY
        ciudad
    ORDER BY
        total_facturacion DESC
    LIMIT 10
),
facturacion_mayo_2024 AS (
    SELECT
        ciudad,
        SUM(monto_sin_iva) AS total_facturacion
    FROM "DATAWAREHOUSE".FACTURACION
    WHERE
        fecha BETWEEN '2024-05-01' AND '2024-05-31'
    GROUP BY
        ciudad
    ORDER BY
        total_facturacion DESC
    LIMIT 10
)
SELECT
    f2023.ciudad AS ciudad_2023,
    f2023.total_facturacion AS total_facturacion_2023,
    f2024.ciudad AS ciudad_2024,
    f2024.total_facturacion AS total_facturacion_2024
FROM "facturacion_mayo_2023" f2023
FULL OUTER JOIN "facturacion_mayo_2024" f2024
ON
    f2023.ciudad = f2024.ciudad
ORDER BY
    COALESCE(f2023.total_facturacion, 0) + COALESCE(f2024.total_facturacion, 0) DESC;
2024-06-19 17:36:06,644 - vanna_connector - ERROR - SQL query failed: relation "DATAWAREHOUSE.facturacion" does not exist
LINE 5:     FROM "DATAWAREHOUSE".FACTURACION
                 ^

2024-06-19 17:39:08,966 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:39:09,135 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:39:14,860 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:39:15,011 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:39:15,142 - vanna_connector - INFO - Generating SQL for question: Obtén una tabla comparativa con el top 10 de las ciudades con mayor facturación en mayo de 2023 y compáralo con las ciudades con mayor facturación en mayo de 2024
2024-06-19 17:39:15,144 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:39:16,040 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 17:39:16,056 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:39:21,815 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 953
2024-06-19 17:39:21,818 - vanna_connector - DEBUG - Running SQL query: WITH facturacion_mayo_2023 AS (
    SELECT ciudad, SUM(monto_sin_iva) AS total_facturado
    FROM "DATAWAREHOUSE"."FACTURACION"
    WHERE fecha >= '2023-05-01' AND fecha <= '2023-05-31'
    GROUP BY ciudad
    ORDER BY total_facturado DESC
    LIMIT 10
),
facturacion_mayo_2024 AS (
    SELECT ciudad, SUM(monto_sin_iva) AS total_facturado
    FROM "DATAWAREHOUSE"."FACTURACION"
    WHERE fecha >= '2024-05-01' AND fecha <= '2024-05-31'
    GROUP BY ciudad
    ORDER BY total_facturado DESC
    LIMIT 10
)
SELECT 
    COALESCE(fm2023.ciudad, fm2024.ciudad) AS ciudad, 
    fm2023.total_facturado AS total_facturado_mayo_2023,
    fm2024.total_facturado AS total_facturado_mayo_2024
FROM facturacion_mayo_2023 fm2023
FULL OUTER JOIN facturacion_mayo_2024 fm2024
ON fm2023.ciudad = fm2024.ciudad
ORDER BY COALESCE(fm2023.total_facturado, 0) DESC, COALESCE(fm2024.total_facturado, 0) DESC;
2024-06-19 17:39:28,228 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:39:33,612 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1195
2024-06-19 17:43:19,395 - __main__ - CRITICAL - Critical error: VannaConnector.__init__() got an unexpected keyword argument 'schema'
2024-06-19 17:43:24,022 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:43:24,251 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:43:28,895 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:43:29,034 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:43:29,123 - vanna_connector - INFO - Generating SQL for question: Obtén una tabla comparativa con el top 10 de las ciudades con mayor facturación en mayo de 2023 y compáralo con las ciudades con mayor facturación en mayo de 2024
2024-06-19 17:43:29,124 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:43:29,916 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 17:43:29,936 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:43:34,309 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1065
2024-06-19 17:43:34,311 - vanna_connector - DEBUG - Running SQL query: WITH facturacion_mayo_2023 AS (
    SELECT
        ciudad,
        SUM(monto_sin_iva) AS total_facturacion
    FROM
        "DATAWAREHOUSE"."FACTURACION"
    WHERE
        fecha BETWEEN '2023-05-01' AND '2023-05-31'
    GROUP BY
        ciudad
    ORDER BY
        total_facturacion DESC
    LIMIT 10
),
facturacion_mayo_2024 AS (
    SELECT
        ciudad,
        SUM(monto_sin_iva) AS total_facturacion
    FROM
        "DATAWAREHOUSE"."FACTURACION"
    WHERE
        fecha BETWEEN '2024-05-01' AND '2024-05-31'
    GROUP BY
        ciudad
    ORDER BY
        total_facturacion DESC
    LIMIT 10
)
SELECT
    COALESCE(f2023.ciudad, f2024.ciudad) AS ciudad,
    f2023.total_facturacion AS facturacion_mayo_2023,
    f2024.total_facturacion AS facturacion_mayo_2024
FROM
    facturacion_mayo_2023 f2023
FULL OUTER JOIN
    facturacion_mayo_2024 f2024
ON
    f2023.ciudad = f2024.ciudad
ORDER BY
    COALESCE(f2023.total_facturacion, 0) + COALESCE(f2024.total_facturacion, 0) DESC;
2024-06-19 17:43:35,962 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:43:40,739 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1055
2024-06-19 17:46:39,899 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:46:40,020 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:46:42,118 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:46:42,257 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:46:42,353 - vanna_connector - INFO - Generating SQL for question: Obtain a comparative table with the top 10 cities with the highest billing in May 2023 and compare it with the cities with the highest billing in May 2024.
2024-06-19 17:46:42,354 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:46:43,321 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 17:46:43,327 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:46:48,191 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 874
2024-06-19 17:46:48,195 - vanna_connector - DEBUG - Running SQL query: WITH total_billing_2023 AS (
    SELECT ciudad, SUM(monto_sin_iva) AS total_monto
    FROM FACTURACION
    WHERE fecha BETWEEN '2023-05-01' AND '2023-05-31'
    GROUP BY ciudad
    ORDER BY total_monto DESC
    LIMIT 10
),
total_billing_2024 AS (
    SELECT ciudad, SUM(monto_sin_iva) AS total_monto
    FROM FACTURACION
    WHERE fecha BETWEEN '2024-05-01' AND '2024-05-31'
    GROUP BY ciudad
    ORDER BY total_monto DESC
    LIMIT 10
)
SELECT 
    COALESCE(tb2023.ciudad, tb2024.ciudad) AS ciudad,
    tb2023.total_monto AS total_monto_2023,
    tb2024.total_monto AS total_monto_2024
FROM 
    total_billing_2023 tb2023
FULL OUTER JOIN 
    total_billing_2024 tb2024
ON 
    tb2023.ciudad = tb2024.ciudad
ORDER BY 
    COALESCE(tb2023.total_monto, 0) + COALESCE(tb2024.total_monto, 0) DESC;
2024-06-19 17:46:48,290 - vanna_connector - ERROR - SQL query failed: relation "facturacion" does not exist
LINE 3:     FROM FACTURACION
                 ^

2024-06-19 17:49:10,009 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:49:10,146 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:49:24,212 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:49:24,481 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:49:24,578 - vanna_connector - INFO - Generating SQL for question: Obtain a comparative table with the top 10 cities with the highest billing in May 2023 and compare it with the cities with the highest billing in May 2024.
2024-06-19 17:49:24,579 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:49:25,629 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 17:49:25,634 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:49:31,229 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 866
2024-06-19 17:49:31,233 - vanna_connector - DEBUG - Running SQL query: WITH billing_2023 AS (
    SELECT 
        ciudad,
        SUM(monto_sin_iva) AS total_billing
    FROM "DATAWAREHOUSE"."FACTURACION"
    WHERE fecha BETWEEN '2023-05-01' AND '2023-05-31'
    GROUP BY ciudad
    ORDER BY total_billing DESC
    LIMIT 10
),
billing_2024 AS (
    SELECT 
        ciudad,
        SUM(monto_sin_iva) AS total_billing
    FROM "DATAWAREHOUSE"."FACTURACION"
    WHERE fecha BETWEEN '2024-05-01' AND '2024-05-31'
    GROUP BY ciudad
    ORDER BY total_billing DESC
    LIMIT 10
)
SELECT 
    COALESCE(b2023.ciudad, b2024.ciudad) AS ciudad,
    b2023.total_billing AS billing_2023,
    b2024.total_billing AS billing_2024
FROM "DATAWAREHOUSE"."billing_2023" b2023
FULL OUTER JOIN "DATAWAREHOUSE"."billing_2024" b2024
ON b2023.ciudad = b2024.ciudad
ORDER BY COALESCE(b2023.total_billing, 0) DESC, COALESCE(b2024.total_billing, 0) DESC;
2024-06-19 17:49:31,361 - vanna_connector - ERROR - SQL query failed: relation "DATAWAREHOUSE.billing_2023" does not exist
LINE 25: FROM "DATAWAREHOUSE"."billing_2023" b2023
              ^

2024-06-19 17:51:36,305 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:51:36,511 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:51:39,606 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:51:39,792 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:51:39,904 - vanna_connector - INFO - Generating SQL for question: Obtain
2024-06-19 17:51:39,905 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:51:40,861 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 17:51:40,873 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:51:42,020 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 92
2024-06-19 17:51:42,022 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM DATAWAREHOUSE.FACTURACION;
2024-06-19 17:51:42,157 - vanna_connector - ERROR - SQL query failed: relation "datawarehouse.facturacion" does not exist
LINE 1: SELECT * FROM DATAWAREHOUSE.FACTURACION;
                      ^

2024-06-19 17:51:47,037 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:51:47,223 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:51:49,611 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:51:49,863 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:51:49,958 - vanna_connector - INFO - Generating SQL for question: Obtain a comparative table with the top 10 cities with the highest billing in May 2023 and compare it with the cities with the highest billing in May 2024.
2024-06-19 17:51:49,959 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:51:50,873 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 17:51:50,895 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:51:57,080 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 915
2024-06-19 17:51:57,083 - vanna_connector - DEBUG - Running SQL query: WITH billing_2023 AS (
    SELECT ciudad, SUM(monto_sin_iva) AS total_billing
    FROM DATAWAREHOUSE.FACTURACION
    WHERE DATE_PART('year', fecha) = 2023 AND DATE_PART('month', fecha) = 5
    GROUP BY ciudad
    ORDER BY total_billing DESC
    LIMIT 10
),
billing_2024 AS (
    SELECT ciudad, SUM(monto_sin_iva) AS total_billing
    FROM DATAWAREHOUSE.FACTURACION
    WHERE DATE_PART('year', fecha) = 2024 AND DATE_PART('month', fecha) = 5
    GROUP BY ciudad
    ORDER BY total_billing DESC
    LIMIT 10
)
SELECT
    COALESCE(b2023.ciudad, b2024.ciudad) AS ciudad,
    b2023.total_billing AS billing_2023,
    b2024.total_billing AS billing_2024
FROM
    billing_2023 b2023
FULL OUTER JOIN
    billing_2024 b2024
ON
    b2023.ciudad = b2024.ciudad
ORDER BY
    COALESCE(b2023.total_billing, 0) + COALESCE(b2024.total_billing, 0) DESC;
2024-06-19 17:51:57,200 - vanna_connector - ERROR - SQL query failed: relation "datawarehouse.facturacion" does not exist
LINE 3:     FROM DATAWAREHOUSE.FACTURACION
                 ^

2024-06-19 17:53:32,888 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:53:33,179 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:53:41,630 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:53:41,931 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:53:42,075 - vanna_connector - INFO - Generating SQL for question: Obtain a comparative table with the top 10 cities with the highest billing in May 2023 and compare it with the cities with the highest billing in May 2024.
2024-06-19 17:53:42,076 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:53:42,964 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 17:53:42,969 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:53:46,671 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 883
2024-06-19 17:53:46,672 - vanna_connector - DEBUG - Running SQL query: WITH billing_2023 AS (
    SELECT ciudad, SUM(monto_sin_iva) AS total_billing
    FROM "DATAWAREHOUSE"."FACTURACION"
    WHERE fecha BETWEEN '2023-05-01' AND '2023-05-31'
    GROUP BY ciudad
    ORDER BY total_billing DESC
    LIMIT 10
),
billing_2024 AS (
    SELECT ciudad, SUM(monto_sin_iva) AS total_billing
    FROM "DATAWAREHOUSE"."FACTURACION"
    WHERE fecha BETWEEN '2024-05-01' AND '2024-05-31'
    GROUP BY ciudad
    ORDER BY total_billing DESC
    LIMIT 10
)
SELECT 
    COALESCE(b2023.ciudad, b2024.ciudad) AS ciudad,
    b2023.total_billing AS billing_may_2023,
    b2024.total_billing AS billing_may_2024
FROM 
    billing_2023 b2023
FULL OUTER JOIN 
    billing_2024 b2024
ON 
    b2023.ciudad = b2024.ciudad
ORDER BY
    COALESCE(b2023.total_billing, 0) + COALESCE(b2024.total_billing, 0) DESC;
2024-06-19 17:53:48,395 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:53:53,000 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1245
2024-06-19 17:54:03,663 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:54:03,806 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:54:07,756 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:54:07,986 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:54:08,090 - vanna_connector - INFO - Generating SQL for question: Obtén una tabla comparativa con el top 10 de las ciudades con mayor facturación en mayo de 2023 y compáralo con las ciudades con mayor facturación en mayo de 2024
2024-06-19 17:54:08,091 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:54:09,075 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 17:54:09,077 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:54:14,031 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1002
2024-06-19 17:54:14,033 - vanna_connector - DEBUG - Running SQL query: WITH facturacion_mayo_2023 AS (
    SELECT 
        ciudad, 
        SUM(monto_sin_iva) AS total_facturacion
    FROM 
        "DATAWAREHOUSE"."FACTURACION"
    WHERE 
        fecha BETWEEN '2023-05-01' AND '2023-05-31'
    GROUP BY 
        ciudad
    ORDER BY 
        total_facturacion DESC
    LIMIT 10
),
facturacion_mayo_2024 AS (
    SELECT 
        ciudad, 
        SUM(monto_sin_iva) AS total_facturacion
    FROM 
        "DATAWAREHOUSE"."FACTURACION"
    WHERE 
        fecha BETWEEN '2024-05-01' AND '2024-05-31'
    GROUP BY 
        ciudad
    ORDER BY 
        total_facturacion DESC
    LIMIT 10
)
SELECT 
    f2023.ciudad AS ciudad_2023,
    f2023.total_facturacion AS total_facturacion_2023,
    f2024.ciudad AS ciudad_2024,
    f2024.total_facturacion AS total_facturacion_2024
FROM 
    facturacion_mayo_2023 f2023
FULL OUTER JOIN 
    facturacion_mayo_2024 f2024
ON 
    f2023.ciudad = f2024.ciudad;
2024-06-19 17:54:15,657 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:54:20,238 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1041
2024-06-19 17:54:23,808 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:54:23,969 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:54:32,263 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:54:32,419 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:54:32,566 - vanna_connector - INFO - Generating SQL for question: Obtain a comparative table with the top 10 cities with the highest billing in May 2023 and compare it with the cities with the highest billing in May 2024
2024-06-19 17:54:32,567 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:54:33,448 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 17:54:33,454 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:54:37,032 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 876
2024-06-19 17:54:37,034 - vanna_connector - DEBUG - Running SQL query: WITH billing_2023 AS (
    SELECT ciudad, SUM(monto_sin_iva) AS total_billing
    FROM "DATAWAREHOUSE"."FACTURACION"
    WHERE fecha BETWEEN '2023-05-01' AND '2023-05-31'
    GROUP BY ciudad
    ORDER BY total_billing DESC
    LIMIT 10
),
billing_2024 AS (
    SELECT ciudad, SUM(monto_sin_iva) AS total_billing
    FROM "DATAWAREHOUSE"."FACTURACION"
    WHERE fecha BETWEEN '2024-05-01' AND '2024-05-31'
    GROUP BY ciudad
    ORDER BY total_billing DESC
    LIMIT 10
)
SELECT 
    COALESCE(b2023.ciudad, b2024.ciudad) AS ciudad,
    b2023.total_billing AS billing_2023,
    b2024.total_billing AS billing_2024
FROM 
    billing_2023 b2023
FULL OUTER JOIN 
    billing_2024 b2024
ON 
    b2023.ciudad = b2024.ciudad
ORDER BY 
    COALESCE(b2023.total_billing, 0) + COALESCE(b2024.total_billing, 0) DESC;
2024-06-19 17:54:38,764 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:54:42,632 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1048
2024-06-19 17:55:56,302 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:55:56,462 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:56:20,702 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:56:20,846 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:56:20,948 - vanna_connector - INFO - Generating SQL for question: Obtain a comparative table with the top 10 cities with the highest billing in May 2023 and compare it with the cities with the highest billing in May 2024
2024-06-19 17:56:20,949 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:56:21,861 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 17:56:21,871 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:56:27,829 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 970
2024-06-19 17:56:27,831 - vanna_connector - DEBUG - Running SQL query: WITH Billing2023 AS (
    SELECT 
        ciudad, 
        SUM(monto_sin_iva) AS total_billing_2023
    FROM 
        FACTURACION
    WHERE 
        fecha >= '2023-05-01' AND fecha <= '2023-05-31'
    GROUP BY 
        ciudad
    ORDER BY 
        total_billing_2023 DESC
    LIMIT 10
),
Billing2024 AS (
    SELECT 
        ciudad, 
        SUM(monto_sin_iva) AS total_billing_2024
    FROM 
        FACTURACION
    WHERE 
        fecha >= '2024-05-01' AND fecha <= '2024-05-31'
    GROUP BY 
        ciudad
    ORDER BY 
        total_billing_2024 DESC
    LIMIT 10
)
SELECT 
    COALESCE(Billing2023.ciudad, Billing2024.ciudad) AS ciudad,
    Billing2023.total_billing_2023,
    Billing2024.total_billing_2024
FROM 
    Billing2023
FULL OUTER JOIN 
    Billing2024
ON 
    Billing2023.ciudad = Billing2024.ciudad
ORDER BY 
    COALESCE(Billing2023.ciudad, Billing2024.ciudad);
2024-06-19 17:56:28,132 - vanna_connector - ERROR - SQL query failed: relation "facturacion" does not exist
LINE 6:         FACTURACION
                ^

2024-06-19 17:56:39,274 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:56:39,421 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:56:41,454 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:56:41,611 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:56:41,707 - vanna_connector - INFO - Generating SQL for question: Obtain a comparative table with the top 10 cities with the highest billing in May 2023 and compare it with the cities with the highest billing in May 2024
2024-06-19 17:56:41,708 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:56:42,679 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 17:56:42,685 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:56:48,712 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 957
2024-06-19 17:56:48,713 - vanna_connector - DEBUG - Running SQL query: WITH May2023 AS (
    SELECT
        ciudad,
        SUM(monto_sin_iva) AS total_billing
    FROM
        "DATAWAREHOUSE"."FACTURACION"
    WHERE
        fecha BETWEEN '2023-05-01' AND '2023-05-31'
    GROUP BY
        ciudad
    ORDER BY
        total_billing DESC
    LIMIT 10
),
May2024 AS (
    SELECT
        ciudad,
        SUM(monto_sin_iva) AS total_billing
    FROM
        "DATAWAREHOUSE"."FACTURACION"
    WHERE
        fecha BETWEEN '2024-05-01' AND '2024-05-31'
    GROUP BY
        ciudad
    ORDER BY
        total_billing DESC
    LIMIT 10
)
SELECT
    COALESCE(May2023.ciudad, May2024.ciudad) AS ciudad,
    May2023.total_billing AS billing_2023,
    May2024.total_billing AS billing_2024
FROM
    May2023
FULL OUTER JOIN
    May2024 ON May2023.ciudad = May2024.ciudad
ORDER BY
    COALESCE(May2023.total_billing, 0) + COALESCE(May2024.total_billing, 0) DESC;
2024-06-19 17:56:50,333 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 17:56:55,466 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1317
2024-06-19 17:57:02,490 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:57:02,694 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:59:23,125 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:59:23,312 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 17:59:32,765 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 17:59:32,920 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:00:07,427 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:00:07,698 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:00:07,802 - vanna_connector - INFO - Generating SQL for question: 
2024-06-19 18:00:07,803 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:00:08,827 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 18:00:08,852 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:00:10,204 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 200
2024-06-19 18:00:10,206 - vanna_connector - DEBUG - Running SQL query: The provided context is insufficient to generate a SQL query because the question is not specified. Please provide a specific question or requirement to proceed.
2024-06-19 18:00:10,292 - vanna_connector - ERROR - SQL query failed: syntax error at or near "The"
LINE 1: The provided context is insufficient to generate a SQL query...
        ^

2024-06-19 18:00:16,749 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:00:16,962 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:00:30,185 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:00:30,360 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:00:30,477 - vanna_connector - INFO - Generating SQL for question: Obtain a comparative table with the top 10 cities with the highest billing in May 2023 and compare it with the cities with the highest billing in May 2024.
2024-06-19 18:00:30,478 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:00:31,549 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 18:00:31,552 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:00:35,170 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 916
2024-06-19 18:00:35,172 - vanna_connector - DEBUG - Running SQL query: WITH billing_2023 AS (
    SELECT 
        ciudad,
        SUM(monto_sin_iva) AS total_billing
    FROM 
        "DATAWAREHOUSE"."FACTURACION"
    WHERE 
        fecha BETWEEN '2023-05-01' AND '2023-05-31'
    GROUP BY 
        ciudad
    ORDER BY 
        total_billing DESC
    LIMIT 10
),
billing_2024 AS (
    SELECT 
        ciudad,
        SUM(monto_sin_iva) AS total_billing
    FROM 
        "DATAWAREHOUSE"."FACTURACION"
    WHERE 
        fecha BETWEEN '2024-05-01' AND '2024-05-31'
    GROUP BY 
        ciudad
    ORDER BY 
        total_billing DESC
    LIMIT 10
)
SELECT 
    b2023.ciudad AS city_2023,
    b2023.total_billing AS billing_2023,
    b2024.ciudad AS city_2024,
    b2024.total_billing AS billing_2024
FROM 
    billing_2023 b2023
FULL OUTER JOIN 
    billing_2024 b2024
ON 
    b2023.ciudad = b2024.ciudad;
2024-06-19 18:00:36,847 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:00:41,738 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 940
2024-06-19 18:01:01,049 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:01:01,212 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:01:04,318 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:01:04,471 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:01:04,554 - vanna_connector - INFO - Generating SQL for question: Obtén una tabla comparativa con la facturación por ciudades en mayo de 2023 y compáralo con la facturación ciudades en mayo de 2024 y calcula el crecimiento por ciudad ordena por la ciudad con más facturación en el 2024 y calcula también el crecimiento en porcentaje en otra columna
2024-06-19 18:01:04,555 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:01:05,473 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 18:01:05,499 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:01:09,497 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 836
2024-06-19 18:01:09,499 - vanna_connector - DEBUG - Running SQL query: SELECT 
    f2024.ciudad,
    f2023.total_facturacion AS facturacion_mayo_2023,
    f2024.total_facturacion AS facturacion_mayo_2024,
    (f2024.total_facturacion - f2023.total_facturacion) AS crecimiento,
    ((f2024.total_facturacion - f2023.total_facturacion) / f2023.total_facturacion * 100) AS crecimiento_porcentaje
FROM 
    (SELECT ciudad, SUM(monto_sin_iva) AS total_facturacion
     FROM "DATAWAREHOUSE"."FACTURACION"
     WHERE fecha BETWEEN '2023-05-01' AND '2023-05-31'
     GROUP BY ciudad) AS f2023
JOIN 
    (SELECT ciudad, SUM(monto_sin_iva) AS total_facturacion
     FROM "DATAWAREHOUSE"."FACTURACION"
     WHERE fecha BETWEEN '2024-05-01' AND '2024-05-31'
     GROUP BY ciudad) AS f2024
ON f2023.ciudad = f2024.ciudad
ORDER BY f2024.total_facturacion DESC;
2024-06-19 18:01:11,166 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:01:14,518 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 849
2024-06-19 18:05:34,100 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:05:34,668 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:06:16,679 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:06:16,853 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:06:16,955 - vanna_connector - INFO - Generating SQL for question: Obtén una tabla comparativa con la facturación por ciudades en mayo de 2023 y mayo de 2024 y calcula el crecimiento por ciudad ordena por la ciudad con más facturación en el 2024 y calcula también el crecimiento en porcentaje en otra columna, haz una gráfica de barras comparando ciudad vs ciudad por año y pon los montos de un año
2024-06-19 18:06:16,956 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:06:17,932 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 18:06:17,947 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:06:23,676 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1090
2024-06-19 18:06:23,680 - vanna_connector - DEBUG - Running SQL query: SELECT
    ciudad,
    SUM(CASE WHEN DATE_TRUNC('month', fecha) = '2023-05-01' THEN monto_sin_iva ELSE 0 END) AS facturacion_mayo_2023,
    SUM(CASE WHEN DATE_TRUNC('month', fecha) = '2024-05-01' THEN monto_sin_iva ELSE 0 END) AS facturacion_mayo_2024,
    SUM(CASE WHEN DATE_TRUNC('month', fecha) = '2024-05-01' THEN monto_sin_iva ELSE 0 END) - SUM(CASE WHEN DATE_TRUNC('month', fecha) = '2023-05-01' THEN monto_sin_iva ELSE 0 END) AS crecimiento,
    CASE
        WHEN SUM(CASE WHEN DATE_TRUNC('month', fecha) = '2023-05-01' THEN monto_sin_iva ELSE 0 END) = 0 THEN NULL
        ELSE (SUM(CASE WHEN DATE_TRUNC('month', fecha) = '2024-05-01' THEN monto_sin_iva ELSE 0 END) - SUM(CASE WHEN DATE_TRUNC('month', fecha) = '2023-05-01' THEN monto_sin_iva ELSE 0 END)) / SUM(CASE WHEN DATE_TRUNC('month', fecha) = '2023-05-01' THEN monto_sin_iva ELSE 0 END) * 100
    END AS crecimiento_porcentaje
FROM FACTURACION
WHERE DATE_TRUNC('month', fecha) IN ('2023-05-01', '2024-05-01')
GROUP BY ciudad
ORDER BY facturacion_mayo_2024 DESC;
2024-06-19 18:06:23,823 - vanna_connector - ERROR - SQL query failed: relation "facturacion" does not exist
LINE 10: FROM FACTURACION
              ^

2024-06-19 18:08:24,279 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:08:24,575 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:08:26,272 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:08:26,421 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:08:26,610 - vanna_connector - INFO - Generating SQL for question: Obtén una tabla comparativa con la facturación por ciudades en mayo de 2023 y mayo de 2024 y calcula el crecimiento por ciudad ordena por la ciudad con más facturación en el 2024 y calcula también el crecimiento en porcentaje en otra columna, haz una gráfica de barras comparando ciudad vs ciudad por año y pon los montos de un año
2024-06-19 18:08:26,611 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:08:27,567 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 18:08:27,582 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:08:34,770 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1033
2024-06-19 18:08:34,772 - vanna_connector - DEBUG - Running SQL query: SELECT
    ciudad,
    SUM(CASE WHEN fecha BETWEEN '2023-05-01' AND '2023-05-31' THEN monto_sin_iva ELSE 0 END) AS facturacion_mayo_2023,
    SUM(CASE WHEN fecha BETWEEN '2024-05-01' AND '2024-05-31' THEN monto_sin_iva ELSE 0 END) AS facturacion_mayo_2024,
    SUM(CASE WHEN fecha BETWEEN '2024-05-01' AND '2024-05-31' THEN monto_sin_iva ELSE 0 END) - SUM(CASE WHEN fecha BETWEEN '2023-05-01' AND '2023-05-31' THEN monto_sin_iva ELSE 0 END) AS crecimiento,
    (SUM(CASE WHEN fecha BETWEEN '2024-05-01' AND '2024-05-31' THEN monto_sin_iva ELSE 0 END) - SUM(CASE WHEN fecha BETWEEN '2023-05-01' AND '2023-05-31' THEN monto_sin_iva ELSE 0 END)) / NULLIF(SUM(CASE WHEN fecha BETWEEN '2023-05-01' AND '2023-05-31' THEN monto_sin_iva ELSE 0 END), 0) * 100 AS crecimiento_porcentaje
FROM "DATAWAREHOUSE"."FACTURACION"
WHERE
    (fecha BETWEEN '2023-05-01' AND '2023-05-31') OR
    (fecha BETWEEN '2024-05-01' AND '2024-05-31')
GROUP BY
    ciudad
ORDER BY
    facturacion_mayo_2024 DESC;
2024-06-19 18:08:35,795 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:08:38,963 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 865
2024-06-19 18:08:52,538 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:08:52,717 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:09:23,331 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:09:23,489 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:09:23,608 - vanna_connector - INFO - Generating SQL for question: Obtén una tabla comparativa con la facturación por ciudades en mayo de 2023 y mayo de 2024 y calcula el crecimiento por ciudad ordena por la ciudad con más facturación en el 2024 y calcula también el crecimiento en porcentaje en otra columna, haz una gráfica de barras comparando ciudad vs ciudad por año y pon los montos de un año en el eje y pon los montos y en el eje x pon las ciudades con dos columnas por ciudad, una con la facturacion 2023 y otra con la facturación 2024
2024-06-19 18:09:23,609 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:09:24,500 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 18:09:24,514 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:09:29,259 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1212
2024-06-19 18:09:29,261 - vanna_connector - DEBUG - Running SQL query: WITH facturacion_mayo_2023 AS (
    SELECT 
        ciudad,
        SUM(monto_sin_iva) AS total_facturacion_2023
    FROM "DATAWAREHOUSE"."FACTURACION"
    WHERE 
        fecha >= '2023-05-01' AND fecha <= '2023-05-31'
    GROUP BY 
        ciudad
),
facturacion_mayo_2024 AS (
    SELECT 
        ciudad,
        SUM(monto_sin_iva) AS total_facturacion_2024
    FROM "DATAWAREHOUSE"."FACTURACION"
    WHERE 
        fecha >= '2024-05-01' AND fecha <= '2024-05-31'
    GROUP BY 
        ciudad
)
SELECT 
    f2024.ciudad,
    COALESCE(f2023.total_facturacion_2023, 0) AS total_facturacion_2023,
    f2024.total_facturacion_2024,
    (f2024.total_facturacion_2024 - COALESCE(f2023.total_facturacion_2023, 0)) AS crecimiento,
    CASE 
        WHEN COALESCE(f2023.total_facturacion_2023, 0) = 0 THEN NULL
        ELSE ROUND((f2024.total_facturacion_2024 - COALESCE(f2023.total_facturacion_2023, 0)) * 100.0 / COALESCE(f2023.total_facturacion_2023, 1), 2) 
    END AS crecimiento_porcentaje
FROM 
    facturacion_mayo_2024 f2024
LEFT JOIN 
    facturacion_mayo_2023 f2023 ON f2024.ciudad = f2023.ciudad
ORDER BY 
    total_facturacion_2024 DESC;
2024-06-19 18:09:30,918 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:09:35,561 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1289
2024-06-19 18:12:00,223 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:12:00,368 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:12:11,028 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:12:11,224 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:12:11,365 - vanna_connector - INFO - Generating SQL for question: Obtener una tabla comparativa con la facturación por ciudades en mayo de 2023 y mayo de 2024. Calcular el crecimiento por ciudad comparando mayo de 2023 y mayo de 2024. Ordenar la tabla por la ciudad con más facturación en mayo de 2024. Agregar una columna que muestre el crecimiento en porcentaje por ciudad. Crear una gráfica de barras comparando la facturación por ciudad entre 2023 y 2024. En el eje x de la gráfica, poner las ciudades con dos columnas por ciudad (una para la facturación de 2023 y otra para la de 2024). En el eje y de la gráfica, poner los montos de facturación de cada ciudad y de cada año.
2024-06-19 18:12:11,366 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:12:12,358 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 18:12:12,373 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:12:23,306 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 2388
2024-06-19 18:12:23,308 - vanna_connector - DEBUG - Running SQL query: WITH facturacion_mayo AS (
    SELECT 
        ciudad,
        DATE_TRUNC('year', fecha) AS ano,
        SUM(monto_sin_iva) AS total_facturacion
    FROM 
        DATAWAREHOUSE.FACTURACION
    WHERE 
        DATE_PART('month', fecha) = 5
        AND DATE_PART('year', fecha) IN (2023, 2024)
    GROUP BY 
        ciudad, DATE_TRUNC('year', fecha)
)

-- Calcular el crecimiento por ciudad comparando mayo de 2023 y mayo de 2024
SELECT
    fm2024.ciudad,
    fm2023.total_facturacion AS facturacion_mayo_2023,
    fm2024.total_facturacion AS facturacion_mayo_2024,
    ((fm2024.total_facturacion - fm2023.total_facturacion) / fm2023.total_facturacion * 100) AS crecimiento_porcentaje
FROM
    facturacion_mayo fm2023
JOIN 
    facturacion_mayo fm2024
ON 
    fm2023.ciudad = fm2024.ciudad
    AND fm2023.ano = '2023-01-01'
    AND fm2024.ano = '2024-01-01'
ORDER BY
    fm2024.total_facturacion DESC;
2024-06-19 18:12:23,432 - vanna_connector - ERROR - SQL query failed: relation "datawarehouse.facturacion" does not exist
LINE 7:         DATAWAREHOUSE.FACTURACION
                ^

2024-06-19 18:13:40,418 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:13:40,581 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:13:43,715 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:13:43,904 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:13:44,004 - vanna_connector - INFO - Generating SQL for question: Obtén una tabla comparativa con la facturación por ciudades en mayo de 2023 y compáralo con la facturación ciudades en mayo de 2024 y calcula el crecimiento por ciudad ordena por la ciudad con más facturación en el 2024 y calcula también el crecimiento en porcentaje en otra columna, haz una gráfica de barras comparando ciudad vs ciudad por año y pon los montos de un año y agrega una gráfica de línea de crecimiento entre cada una de las ciudades para ver el crecimiento de un año contra el otro
2024-06-19 18:13:44,005 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:13:45,010 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 18:13:45,015 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:13:50,987 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 980
2024-06-19 18:13:50,989 - vanna_connector - DEBUG - Running SQL query: SELECT 
    f1.ciudad,
    COALESCE(f1.total_monto_sin_iva, 0) AS total_monto_mayo_2023,
    COALESCE(f2.total_monto_sin_iva, 0) AS total_monto_mayo_2024,
    COALESCE(f2.total_monto_sin_iva, 0) - COALESCE(f1.total_monto_sin_iva, 0) AS crecimiento,
    CASE 
        WHEN COALESCE(f1.total_monto_sin_iva, 0) = 0 THEN 100
        ELSE (COALESCE(f2.total_monto_sin_iva, 0) - COALESCE(f1.total_monto_sin_iva, 0)) / COALESCE(f1.total_monto_sin_iva, 0) * 100
    END AS crecimiento_porcentaje
FROM 
    (SELECT ciudad, SUM(monto_sin_iva) AS total_monto_sin_iva
     FROM "DATAWAREHOUSE"."FACTURACION"
     WHERE fecha >= '2023-05-01' AND fecha <= '2023-05-31'
     GROUP BY ciudad) f1
FULL OUTER JOIN 
    (SELECT ciudad, SUM(monto_sin_iva) AS total_monto_sin_iva
     FROM "DATAWAREHOUSE"."FACTURACION"
     WHERE fecha >= '2024-05-01' AND fecha <= '2024-05-31'
     GROUP BY ciudad) f2
ON f1.ciudad = f2.ciudad
ORDER BY total_monto_mayo_2024 DESC;
2024-06-19 18:13:52,672 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:13:58,640 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1576
2024-06-19 18:22:57,141 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:22:57,300 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:23:08,455 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:23:08,676 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:23:08,780 - vanna_connector - INFO - Generating SQL for question: Obtain a comparative table with the top 10 cities with the highest billing in May 2023 and compare it with the cities with the highest billing in May 2024.
2024-06-19 18:23:08,781 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:23:09,761 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 18:23:09,924 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:23:14,724 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1004
2024-06-19 18:23:14,727 - vanna_connector - DEBUG - Running SQL query: WITH billing_2023 AS (
    SELECT 
        ciudad,
        SUM(monto_sin_iva) AS total_billing
    FROM 
        DATAWAREHOUSE.FACTURACION
    WHERE 
        fecha BETWEEN '2023-05-01' AND '2023-05-31'
    GROUP BY 
        ciudad
    ORDER BY 
        total_billing DESC
    LIMIT 10
),
billing_2024 AS (
    SELECT 
        ciudad,
        SUM(monto_sin_iva) AS total_billing
    FROM 
        DATAWAREHOUSE.FACTURACION
    WHERE 
        fecha BETWEEN '2024-05-01' AND '2024-05-31'
    GROUP BY 
        ciudad
    ORDER BY 
        total_billing DESC
    LIMIT 10
)
SELECT 
    COALESCE(b2023.ciudad, b2024.ciudad) AS ciudad,
    b2023.total_billing AS billing_2023,
    b2024.total_billing AS billing_2024
FROM 
    billing_2023 b2023
FULL OUTER JOIN 
    billing_2024 b2024
ON 
    b2023.ciudad = b2024.ciudad
ORDER BY 
    COALESCE(b2023.total_billing, 0) DESC, 
    COALESCE(b2024.total_billing, 0) DESC;
2024-06-19 18:23:14,859 - vanna_connector - ERROR - SQL query failed: relation "datawarehouse.facturacion" does not exist
LINE 6:         DATAWAREHOUSE.FACTURACION
                ^

2024-06-19 18:23:51,344 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:23:51,580 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:23:56,594 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:23:56,796 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:23:56,897 - vanna_connector - INFO - Generating SQL for question: Obtain a comparative table with the top 10 cities with the highest billing in May 2023 and compare it with the cities with the highest billing in May 2024.
2024-06-19 18:23:56,898 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:23:57,912 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 18:23:57,929 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:24:02,939 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1048
2024-06-19 18:24:02,942 - vanna_connector - DEBUG - Running SQL query: WITH Billing_May_2023 AS (
    SELECT 
        ciudad, 
        SUM(monto_sin_iva) AS total_billing
    FROM 
        DATAWAREHOUSE.FACTURACION
    WHERE 
        fecha >= '2023-05-01' AND fecha <= '2023-05-31'
    GROUP BY 
        ciudad
    ORDER BY 
        total_billing DESC
    LIMIT 10
), Billing_May_2024 AS (
    SELECT 
        ciudad, 
        SUM(monto_sin_iva) AS total_billing
    FROM 
        DATAWAREHOUSE.FACTURACION
    WHERE 
        fecha >= '2024-05-01' AND fecha <= '2024-05-31'
    GROUP BY 
        ciudad
    ORDER BY 
        total_billing DESC
    LIMIT 10
)
SELECT
    COALESCE(BM2023.ciudad, BM2024.ciudad) AS ciudad,
    BM2023.total_billing AS total_billing_may_2023,
    BM2024.total_billing AS total_billing_may_2024
FROM
    Billing_May_2023 BM2023
FULL OUTER JOIN
    Billing_May_2024 BM2024
ON
    BM2023.ciudad = BM2024.ciudad
ORDER BY
    COALESCE(BM2023.total_billing, 0) DESC, COALESCE(BM2024.total_billing, 0) DESC;
2024-06-19 18:24:03,107 - vanna_connector - ERROR - SQL query failed: relation "datawarehouse.facturacion" does not exist
LINE 6:         DATAWAREHOUSE.FACTURACION
                ^

2024-06-19 18:24:27,724 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:24:27,941 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:24:29,397 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:24:29,608 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:24:29,738 - vanna_connector - INFO - Generating SQL for question: Obtain a comparative table with the top 10 cities with the highest billing in May 2023 and compare it with the cities with the highest billing in May 2024.
2024-06-19 18:24:29,740 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:24:30,783 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 18:24:30,797 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:24:34,699 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 919
2024-06-19 18:24:34,701 - vanna_connector - DEBUG - Running SQL query: WITH billing_2023 AS (
    SELECT 
        ciudad, 
        SUM(monto_sin_iva) AS total_billing
    FROM 
        "DATAWAREHOUSE"."FACTURACION"
    WHERE 
        fecha BETWEEN '2023-05-01' AND '2023-05-31'
    GROUP BY 
        ciudad
    ORDER BY 
        total_billing DESC
    LIMIT 10
),
billing_2024 AS (
    SELECT 
        ciudad, 
        SUM(monto_sin_iva) AS total_billing
    FROM 
        "DATAWAREHOUSE"."FACTURACION"
    WHERE 
        fecha BETWEEN '2024-05-01' AND '2024-05-31'
    GROUP BY 
        ciudad
    ORDER BY 
        total_billing DESC
    LIMIT 10
)
SELECT 
    COALESCE(b2023.ciudad, b2024.ciudad) AS ciudad,
    b2023.total_billing AS total_billing_2023,
    b2024.total_billing AS total_billing_2024
FROM 
    billing_2023 b2023
FULL OUTER JOIN 
    billing_2024 b2024
ON 
    b2023.ciudad = b2024.ciudad;
2024-06-19 18:24:36,369 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:24:42,268 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1293
2024-06-19 18:24:47,816 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:24:48,175 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:24:50,133 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:24:50,274 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:24:50,398 - vanna_connector - INFO - Generating SQL for question: Obtain a comparative table with the top 10 cities with the highest billing in May 2023 and compare it with the cities with the highest billing in May 2024.
2024-06-19 18:24:50,399 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:24:51,336 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 18:24:51,357 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:24:57,920 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1009
2024-06-19 18:24:57,923 - vanna_connector - DEBUG - Running SQL query: WITH May2023Billing AS (
    SELECT 
        ciudad, 
        SUM(monto_sin_iva) AS total_billing
    FROM "DATAWAREHOUSE"."FACTURACION"
    WHERE fecha >= '2023-05-01' AND fecha <= '2023-05-31'
    GROUP BY ciudad
    ORDER BY total_billing DESC
    LIMIT 10
),
May2024Billing AS (
    SELECT 
        ciudad, 
        SUM(monto_sin_iva) AS total_billing
    FROM "DATAWAREHOUSE"."FACTURACION"
    WHERE fecha >= '2024-05-01' AND fecha <= '2024-05-31'
    GROUP BY ciudad
    ORDER BY total_billing DESC
    LIMIT 10
)
SELECT 
    COALESCE(May2023Billing.ciudad, May2024Billing.ciudad) AS ciudad,
    May2023Billing.total_billing AS billing_may_2023,
    May2024Billing.total_billing AS billing_may_2024
FROM 
    May2023Billing
FULL OUTER JOIN 
    May2024Billing
ON 
    May2023Billing.ciudad = May2024Billing.ciudad
ORDER BY 
    COALESCE(May2023Billing.total_billing, 0) DESC,
    COALESCE(May2024Billing.total_billing, 0) DESC;
2024-06-19 18:24:59,546 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:25:02,037 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 682
2024-06-19 18:25:04,217 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:25:04,475 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:25:04,583 - __main__ - CRITICAL - Critical error: 'VannaConnector' object has no attribute 'train'
2024-06-19 18:25:05,792 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:25:05,961 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:25:06,096 - __main__ - CRITICAL - Critical error: 'VannaConnector' object has no attribute 'train'
2024-06-19 18:25:06,874 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:25:07,117 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:25:07,242 - __main__ - CRITICAL - Critical error: 'VannaConnector' object has no attribute 'train'
2024-06-19 18:25:22,876 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:25:23,039 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:25:23,130 - __main__ - CRITICAL - Critical error: 'TrainingPlan' object has no attribute 'train'
2024-06-19 18:25:31,704 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:25:31,908 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:25:33,781 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:25:34,120 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:25:34,243 - vanna_connector - INFO - Generating SQL for question: Obtain a comparative table with the top 10 cities with the highest billing in May 2023 and compare it with the cities with the highest billing in May 2024.
2024-06-19 18:25:34,244 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:25:35,218 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 18:25:35,222 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:25:39,650 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1010
2024-06-19 18:25:39,652 - vanna_connector - DEBUG - Running SQL query: WITH billing_2023 AS (
    SELECT 
        ciudad, 
        SUM(monto_sin_iva) AS total_billing_2023
    FROM 
        "DATAWAREHOUSE"."FACTURACION"
    WHERE 
        DATE_TRUNC('month', fecha) = '2023-05-01'
    GROUP BY 
        ciudad
    ORDER BY 
        total_billing_2023 DESC
    LIMIT 10
),
billing_2024 AS (
    SELECT 
        ciudad, 
        SUM(monto_sin_iva) AS total_billing_2024
    FROM 
        "DATAWAREHOUSE"."FACTURACION"
    WHERE 
        DATE_TRUNC('month', fecha) = '2024-05-01'
    GROUP BY 
        ciudad
    ORDER BY 
        total_billing_2024 DESC
    LIMIT 10
)
SELECT 
    COALESCE(b2023.ciudad, b2024.ciudad) AS ciudad,
    b2023.total_billing_2023,
    b2024.total_billing_2024
FROM 
    billing_2023 b2023
FULL OUTER JOIN 
    billing_2024 b2024
ON 
    b2023.ciudad = b2024.ciudad
ORDER BY 
    COALESCE(b2023.total_billing_2023, 0) DESC, 
    COALESCE(b2024.total_billing_2024, 0) DESC;
2024-06-19 18:25:42,461 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:25:46,244 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 881
2024-06-19 18:26:05,357 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:26:05,478 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:26:08,791 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:26:08,969 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:26:09,068 - vanna_connector - INFO - Generating SQL for question: Obtain a comparative table with the top 10 cities with the highest billing in May 2023 and compare it with the cities with the highest billing in May 2024.
2024-06-19 18:26:09,069 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:26:10,009 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 18:26:10,053 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:26:14,996 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1004
2024-06-19 18:26:14,999 - vanna_connector - DEBUG - Running SQL query: WITH billing_2023 AS (
    SELECT 
        ciudad, 
        SUM(monto_sin_iva) AS total_billing 
    FROM 
        "DATAWAREHOUSE"."FACTURACION" 
    WHERE 
        DATE_TRUNC('month', fecha) = '2023-05-01'
    GROUP BY 
        ciudad
    ORDER BY 
        total_billing DESC
    LIMIT 10
),
billing_2024 AS (
    SELECT 
        ciudad, 
        SUM(monto_sin_iva) AS total_billing 
    FROM 
        "DATAWAREHOUSE"."FACTURACION" 
    WHERE 
        DATE_TRUNC('month', fecha) = '2024-05-01'
    GROUP BY 
        ciudad
    ORDER BY 
        total_billing DESC
    LIMIT 10
)
SELECT 
    COALESCE(b2023.ciudad, b2024.ciudad) AS ciudad,
    b2023.total_billing AS billing_may_2023,
    b2024.total_billing AS billing_may_2024
FROM 
    billing_2023 b2023
FULL OUTER JOIN 
    billing_2024 b2024
ON 
    b2023.ciudad = b2024.ciudad
ORDER BY 
    COALESCE(b2023.total_billing, 0) + COALESCE(b2024.total_billing, 0) DESC;
2024-06-19 18:26:17,770 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:26:21,298 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 889
2024-06-19 18:27:49,919 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:27:50,090 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:27:50,185 - __main__ - CRITICAL - Critical error: VannaConnector.train() got an unexpected keyword argument 'plan'
2024-06-19 18:28:45,612 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:28:45,848 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:28:45,962 - vanna_connector - INFO - Training model with data from: Train on Information Schema: datawarehouse.DATAWAREHOUSE FACTURACION
2024-06-19 18:28:45,962 - vanna_connector - ERROR - Model training failed: Invalid file path or buffer object type: <class 'vanna.types.TrainingPlan'>
2024-06-19 18:30:28,001 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:30:28,158 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:30:28,245 - __main__ - CRITICAL - Critical error: VannaConnector.train() got an unexpected keyword argument 'data_path'
2024-06-19 18:30:45,865 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:30:45,900 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:30:46,119 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:30:46,119 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:30:46,266 - __main__ - CRITICAL - Critical error: VannaConnector.train() got an unexpected keyword argument 'data_path'
2024-06-19 18:30:46,304 - __main__ - CRITICAL - Critical error: VannaConnector.train() got an unexpected keyword argument 'data_path'
2024-06-19 18:32:47,932 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:32:48,236 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:32:48,479 - vanna_connector - INFO - Training model with plan
2024-06-19 18:32:48,483 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:32:49,223 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 109
2024-06-19 18:32:49,223 - vanna_connector - INFO - Model training completed successfully
2024-06-19 18:32:58,792 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:32:59,071 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:32:59,174 - vanna_connector - INFO - Training model with plan
2024-06-19 18:32:59,175 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:32:59,961 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 109
2024-06-19 18:32:59,961 - vanna_connector - INFO - Model training completed successfully
2024-06-19 18:32:59,961 - vanna_connector - INFO - Generating SQL for question: Obtén una tabla comparativa con el top 10 de las ciudades con mayor facturación en mayo de 2023 y compáralo con las ciudades con mayor facturación en mayo de 2024
2024-06-19 18:32:59,962 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:33:00,884 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 18:33:00,895 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:33:05,902 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 928
2024-06-19 18:33:05,904 - vanna_connector - DEBUG - Running SQL query: WITH facturacion_mayo_2023 AS (
    SELECT ciudad, SUM(monto_sin_iva) AS total_facturacion
    FROM "DATAWAREHOUSE"."FACTURACION"
    WHERE fecha BETWEEN '2023-05-01' AND '2023-05-31'
    GROUP BY ciudad
    ORDER BY total_facturacion DESC
    LIMIT 10
),
facturacion_mayo_2024 AS (
    SELECT ciudad, SUM(monto_sin_iva) AS total_facturacion
    FROM "DATAWAREHOUSE"."FACTURACION"
    WHERE fecha BETWEEN '2024-05-01' AND '2024-05-31'
    GROUP BY ciudad
    ORDER BY total_facturacion DESC
    LIMIT 10
)
SELECT 
    COALESCE(a.ciudad, b.ciudad) AS ciudad,
    a.total_facturacion AS total_facturacion_2023,
    b.total_facturacion AS total_facturacion_2024
FROM 
    facturacion_mayo_2023 a
FULL OUTER JOIN 
    facturacion_mayo_2024 b
ON 
    a.ciudad = b.ciudad
ORDER BY 
    COALESCE(a.total_facturacion, 0) DESC, COALESCE(b.total_facturacion, 0) DESC;
2024-06-19 18:33:07,570 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:33:12,958 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1272
2024-06-19 18:42:08,505 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:42:08,974 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:42:09,098 - vanna_connector - INFO - Training model with plan
2024-06-19 18:42:09,100 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:42:10,149 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 109
2024-06-19 18:42:10,151 - vanna_connector - INFO - Model training completed successfully
2024-06-19 18:42:12,081 - vanna_connector - INFO - Connecting to PostgreSQL database
2024-06-19 18:42:12,263 - vanna_connector - DEBUG - Running SQL query: SELECT * FROM INFORMATION_SCHEMA.COLUMNS where table_schema = 'DATAWAREHOUSE' and table_name = 'FACTURACION'
2024-06-19 18:42:12,435 - vanna_connector - INFO - Training model with plan
2024-06-19 18:42:12,436 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:42:13,181 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 109
2024-06-19 18:42:13,183 - vanna_connector - INFO - Model training completed successfully
2024-06-19 18:42:13,183 - vanna_connector - INFO - Generating SQL for question: Obtain a comparative table with the top 10 cities with the highest billing in May 2023 and compare it with the cities with the highest billing in May 2024.
2024-06-19 18:42:13,184 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:42:14,076 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 9751
2024-06-19 18:42:14,089 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:42:18,729 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 1002
2024-06-19 18:42:18,731 - vanna_connector - DEBUG - Running SQL query: WITH billing_2023 AS (
    SELECT 
        ciudad,
        SUM(monto_sin_iva) AS total_billing
    FROM 
        "DATAWAREHOUSE"."FACTURACION"
    WHERE 
        fecha >= '2023-05-01' AND fecha < '2023-06-01'
    GROUP BY 
        ciudad
    ORDER BY 
        total_billing DESC
    LIMIT 10
),
billing_2024 AS (
    SELECT 
        ciudad,
        SUM(monto_sin_iva) AS total_billing
    FROM 
        "DATAWAREHOUSE"."FACTURACION"
    WHERE 
        fecha >= '2024-05-01' AND fecha < '2024-06-01'
    GROUP BY 
        ciudad
    ORDER BY 
        total_billing DESC
    LIMIT 10
)

SELECT 
    COALESCE(b2023.ciudad, b2024.ciudad) AS ciudad,
    b2023.total_billing AS billing_2023,
    b2024.total_billing AS billing_2024
FROM 
    billing_2023 b2023
FULL OUTER JOIN 
    billing_2024 b2024
ON 
    b2023.ciudad = b2024.ciudad
ORDER BY 
    COALESCE(b2023.total_billing, 0) + COALESCE(b2024.total_billing, 0) DESC;
2024-06-19 18:42:20,493 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ask.vanna.ai:443
2024-06-19 18:42:23,936 - urllib3.connectionpool - DEBUG - https://ask.vanna.ai:443 "POST /rpc HTTP/11" 200 943
